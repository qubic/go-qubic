// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: quottery_service.proto

package qubicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuotteryService_GetBasicInfo_FullMethodName           = "/qubic.v1.QuotteryService/GetBasicInfo"
	QuotteryService_GetBetInfo_FullMethodName             = "/qubic.v1.QuotteryService/GetBetInfo"
	QuotteryService_GetActiveBets_FullMethodName          = "/qubic.v1.QuotteryService/GetActiveBets"
	QuotteryService_GetActiveBetsByCreator_FullMethodName = "/qubic.v1.QuotteryService/GetActiveBetsByCreator"
	QuotteryService_GetBettorsByBetOption_FullMethodName  = "/qubic.v1.QuotteryService/GetBettorsByBetOption"
)

// QuotteryServiceClient is the client API for QuotteryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotteryServiceClient interface {
	GetBasicInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BasicInfo, error)
	GetBetInfo(ctx context.Context, in *GetBetInfoRequest, opts ...grpc.CallOption) (*BetInfo, error)
	GetActiveBets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveBets, error)
	GetActiveBetsByCreator(ctx context.Context, in *GetActiveBetsByCreatorRequest, opts ...grpc.CallOption) (*ActiveBets, error)
	GetBettorsByBetOption(ctx context.Context, in *GetBettorsByBetOptionRequest, opts ...grpc.CallOption) (*BetOptionBettors, error)
}

type quotteryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotteryServiceClient(cc grpc.ClientConnInterface) QuotteryServiceClient {
	return &quotteryServiceClient{cc}
}

func (c *quotteryServiceClient) GetBasicInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BasicInfo, error) {
	out := new(BasicInfo)
	err := c.cc.Invoke(ctx, QuotteryService_GetBasicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotteryServiceClient) GetBetInfo(ctx context.Context, in *GetBetInfoRequest, opts ...grpc.CallOption) (*BetInfo, error) {
	out := new(BetInfo)
	err := c.cc.Invoke(ctx, QuotteryService_GetBetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotteryServiceClient) GetActiveBets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveBets, error) {
	out := new(ActiveBets)
	err := c.cc.Invoke(ctx, QuotteryService_GetActiveBets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotteryServiceClient) GetActiveBetsByCreator(ctx context.Context, in *GetActiveBetsByCreatorRequest, opts ...grpc.CallOption) (*ActiveBets, error) {
	out := new(ActiveBets)
	err := c.cc.Invoke(ctx, QuotteryService_GetActiveBetsByCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotteryServiceClient) GetBettorsByBetOption(ctx context.Context, in *GetBettorsByBetOptionRequest, opts ...grpc.CallOption) (*BetOptionBettors, error) {
	out := new(BetOptionBettors)
	err := c.cc.Invoke(ctx, QuotteryService_GetBettorsByBetOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotteryServiceServer is the server API for QuotteryService service.
// All implementations must embed UnimplementedQuotteryServiceServer
// for forward compatibility
type QuotteryServiceServer interface {
	GetBasicInfo(context.Context, *emptypb.Empty) (*BasicInfo, error)
	GetBetInfo(context.Context, *GetBetInfoRequest) (*BetInfo, error)
	GetActiveBets(context.Context, *emptypb.Empty) (*ActiveBets, error)
	GetActiveBetsByCreator(context.Context, *GetActiveBetsByCreatorRequest) (*ActiveBets, error)
	GetBettorsByBetOption(context.Context, *GetBettorsByBetOptionRequest) (*BetOptionBettors, error)
	mustEmbedUnimplementedQuotteryServiceServer()
}

// UnimplementedQuotteryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuotteryServiceServer struct {
}

func (UnimplementedQuotteryServiceServer) GetBasicInfo(context.Context, *emptypb.Empty) (*BasicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicInfo not implemented")
}
func (UnimplementedQuotteryServiceServer) GetBetInfo(context.Context, *GetBetInfoRequest) (*BetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetInfo not implemented")
}
func (UnimplementedQuotteryServiceServer) GetActiveBets(context.Context, *emptypb.Empty) (*ActiveBets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBets not implemented")
}
func (UnimplementedQuotteryServiceServer) GetActiveBetsByCreator(context.Context, *GetActiveBetsByCreatorRequest) (*ActiveBets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveBetsByCreator not implemented")
}
func (UnimplementedQuotteryServiceServer) GetBettorsByBetOption(context.Context, *GetBettorsByBetOptionRequest) (*BetOptionBettors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBettorsByBetOption not implemented")
}
func (UnimplementedQuotteryServiceServer) mustEmbedUnimplementedQuotteryServiceServer() {}

// UnsafeQuotteryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotteryServiceServer will
// result in compilation errors.
type UnsafeQuotteryServiceServer interface {
	mustEmbedUnimplementedQuotteryServiceServer()
}

func RegisterQuotteryServiceServer(s grpc.ServiceRegistrar, srv QuotteryServiceServer) {
	s.RegisterService(&QuotteryService_ServiceDesc, srv)
}

func _QuotteryService_GetBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotteryServiceServer).GetBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotteryService_GetBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotteryServiceServer).GetBasicInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotteryService_GetBetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotteryServiceServer).GetBetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotteryService_GetBetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotteryServiceServer).GetBetInfo(ctx, req.(*GetBetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotteryService_GetActiveBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotteryServiceServer).GetActiveBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotteryService_GetActiveBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotteryServiceServer).GetActiveBets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotteryService_GetActiveBetsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveBetsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotteryServiceServer).GetActiveBetsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotteryService_GetActiveBetsByCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotteryServiceServer).GetActiveBetsByCreator(ctx, req.(*GetActiveBetsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotteryService_GetBettorsByBetOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBettorsByBetOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotteryServiceServer).GetBettorsByBetOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotteryService_GetBettorsByBetOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotteryServiceServer).GetBettorsByBetOption(ctx, req.(*GetBettorsByBetOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotteryService_ServiceDesc is the grpc.ServiceDesc for QuotteryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotteryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.v1.QuotteryService",
	HandlerType: (*QuotteryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasicInfo",
			Handler:    _QuotteryService_GetBasicInfo_Handler,
		},
		{
			MethodName: "GetBetInfo",
			Handler:    _QuotteryService_GetBetInfo_Handler,
		},
		{
			MethodName: "GetActiveBets",
			Handler:    _QuotteryService_GetActiveBets_Handler,
		},
		{
			MethodName: "GetActiveBetsByCreator",
			Handler:    _QuotteryService_GetActiveBetsByCreator_Handler,
		},
		{
			MethodName: "GetBettorsByBetOption",
			Handler:    _QuotteryService_GetBettorsByBetOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quottery_service.proto",
}
