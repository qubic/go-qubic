// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: core_service.proto

package qubicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreService_GetTickInfo_FullMethodName               = "/qubic.v1.CoreService/GetTickInfo"
	CoreService_GetEntityInfo_FullMethodName             = "/qubic.v1.CoreService/GetEntityInfo"
	CoreService_GetComputors_FullMethodName              = "/qubic.v1.CoreService/GetComputors"
	CoreService_GetTickQuorumVote_FullMethodName         = "/qubic.v1.CoreService/GetTickQuorumVote"
	CoreService_GetTickData_FullMethodName               = "/qubic.v1.CoreService/GetTickData"
	CoreService_GetTickTransactions_FullMethodName       = "/qubic.v1.CoreService/GetTickTransactions"
	CoreService_GetTickTransactionsStatus_FullMethodName = "/qubic.v1.CoreService/GetTickTransactionsStatus"
)

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	GetTickInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TickInfo, error)
	GetEntityInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*EntityInfo, error)
	GetComputors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Computors, error)
	GetTickQuorumVote(ctx context.Context, in *GetTickQuorumVoteRequest, opts ...grpc.CallOption) (*QuorumVote, error)
	GetTickData(ctx context.Context, in *GetTickDataRequest, opts ...grpc.CallOption) (*TickData, error)
	GetTickTransactions(ctx context.Context, in *GetTickTransactionsRequest, opts ...grpc.CallOption) (*TickTransactions, error)
	GetTickTransactionsStatus(ctx context.Context, in *GetTickTransactionsStatusRequest, opts ...grpc.CallOption) (*TickTransactionsStatus, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) GetTickInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TickInfo, error) {
	out := new(TickInfo)
	err := c.cc.Invoke(ctx, CoreService_GetTickInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetEntityInfo(ctx context.Context, in *GetEntityInfoRequest, opts ...grpc.CallOption) (*EntityInfo, error) {
	out := new(EntityInfo)
	err := c.cc.Invoke(ctx, CoreService_GetEntityInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetComputors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Computors, error) {
	out := new(Computors)
	err := c.cc.Invoke(ctx, CoreService_GetComputors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetTickQuorumVote(ctx context.Context, in *GetTickQuorumVoteRequest, opts ...grpc.CallOption) (*QuorumVote, error) {
	out := new(QuorumVote)
	err := c.cc.Invoke(ctx, CoreService_GetTickQuorumVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetTickData(ctx context.Context, in *GetTickDataRequest, opts ...grpc.CallOption) (*TickData, error) {
	out := new(TickData)
	err := c.cc.Invoke(ctx, CoreService_GetTickData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetTickTransactions(ctx context.Context, in *GetTickTransactionsRequest, opts ...grpc.CallOption) (*TickTransactions, error) {
	out := new(TickTransactions)
	err := c.cc.Invoke(ctx, CoreService_GetTickTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetTickTransactionsStatus(ctx context.Context, in *GetTickTransactionsStatusRequest, opts ...grpc.CallOption) (*TickTransactionsStatus, error) {
	out := new(TickTransactionsStatus)
	err := c.cc.Invoke(ctx, CoreService_GetTickTransactionsStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	GetTickInfo(context.Context, *emptypb.Empty) (*TickInfo, error)
	GetEntityInfo(context.Context, *GetEntityInfoRequest) (*EntityInfo, error)
	GetComputors(context.Context, *emptypb.Empty) (*Computors, error)
	GetTickQuorumVote(context.Context, *GetTickQuorumVoteRequest) (*QuorumVote, error)
	GetTickData(context.Context, *GetTickDataRequest) (*TickData, error)
	GetTickTransactions(context.Context, *GetTickTransactionsRequest) (*TickTransactions, error)
	GetTickTransactionsStatus(context.Context, *GetTickTransactionsStatusRequest) (*TickTransactionsStatus, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) GetTickInfo(context.Context, *emptypb.Empty) (*TickInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickInfo not implemented")
}
func (UnimplementedCoreServiceServer) GetEntityInfo(context.Context, *GetEntityInfoRequest) (*EntityInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityInfo not implemented")
}
func (UnimplementedCoreServiceServer) GetComputors(context.Context, *emptypb.Empty) (*Computors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputors not implemented")
}
func (UnimplementedCoreServiceServer) GetTickQuorumVote(context.Context, *GetTickQuorumVoteRequest) (*QuorumVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickQuorumVote not implemented")
}
func (UnimplementedCoreServiceServer) GetTickData(context.Context, *GetTickDataRequest) (*TickData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickData not implemented")
}
func (UnimplementedCoreServiceServer) GetTickTransactions(context.Context, *GetTickTransactionsRequest) (*TickTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickTransactions not implemented")
}
func (UnimplementedCoreServiceServer) GetTickTransactionsStatus(context.Context, *GetTickTransactionsStatusRequest) (*TickTransactionsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickTransactionsStatus not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_GetTickInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTickInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetTickInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTickInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetEntityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetEntityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetEntityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetEntityInfo(ctx, req.(*GetEntityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetComputors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetComputors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetComputors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetComputors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetTickQuorumVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickQuorumVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTickQuorumVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetTickQuorumVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTickQuorumVote(ctx, req.(*GetTickQuorumVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetTickData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTickData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetTickData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTickData(ctx, req.(*GetTickDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetTickTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTickTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetTickTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTickTransactions(ctx, req.(*GetTickTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetTickTransactionsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickTransactionsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetTickTransactionsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetTickTransactionsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetTickTransactionsStatus(ctx, req.(*GetTickTransactionsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.v1.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTickInfo",
			Handler:    _CoreService_GetTickInfo_Handler,
		},
		{
			MethodName: "GetEntityInfo",
			Handler:    _CoreService_GetEntityInfo_Handler,
		},
		{
			MethodName: "GetComputors",
			Handler:    _CoreService_GetComputors_Handler,
		},
		{
			MethodName: "GetTickQuorumVote",
			Handler:    _CoreService_GetTickQuorumVote_Handler,
		},
		{
			MethodName: "GetTickData",
			Handler:    _CoreService_GetTickData_Handler,
		},
		{
			MethodName: "GetTickTransactions",
			Handler:    _CoreService_GetTickTransactions_Handler,
		},
		{
			MethodName: "GetTickTransactionsStatus",
			Handler:    _CoreService_GetTickTransactionsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core_service.proto",
}
