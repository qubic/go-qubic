// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: qx.proto

package qubicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QxService_GetFees_FullMethodName            = "/qubic.v1.QxService/GetFees"
	QxService_GetAssetAskOrders_FullMethodName  = "/qubic.v1.QxService/GetAssetAskOrders"
	QxService_GetAssetBidOrders_FullMethodName  = "/qubic.v1.QxService/GetAssetBidOrders"
	QxService_GetEntityAskOrders_FullMethodName = "/qubic.v1.QxService/GetEntityAskOrders"
	QxService_GetEntityBidOrders_FullMethodName = "/qubic.v1.QxService/GetEntityBidOrders"
)

// QxServiceClient is the client API for QxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QxServiceClient interface {
	GetFees(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Fees, error)
	GetAssetAskOrders(ctx context.Context, in *GetAssetOrdersRequest, opts ...grpc.CallOption) (*AssetOrders, error)
	GetAssetBidOrders(ctx context.Context, in *GetAssetOrdersRequest, opts ...grpc.CallOption) (*AssetOrders, error)
	GetEntityAskOrders(ctx context.Context, in *GetEntityOrdersRequest, opts ...grpc.CallOption) (*EntityOrders, error)
	GetEntityBidOrders(ctx context.Context, in *GetEntityOrdersRequest, opts ...grpc.CallOption) (*EntityOrders, error)
}

type qxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQxServiceClient(cc grpc.ClientConnInterface) QxServiceClient {
	return &qxServiceClient{cc}
}

func (c *qxServiceClient) GetFees(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Fees, error) {
	out := new(Fees)
	err := c.cc.Invoke(ctx, QxService_GetFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qxServiceClient) GetAssetAskOrders(ctx context.Context, in *GetAssetOrdersRequest, opts ...grpc.CallOption) (*AssetOrders, error) {
	out := new(AssetOrders)
	err := c.cc.Invoke(ctx, QxService_GetAssetAskOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qxServiceClient) GetAssetBidOrders(ctx context.Context, in *GetAssetOrdersRequest, opts ...grpc.CallOption) (*AssetOrders, error) {
	out := new(AssetOrders)
	err := c.cc.Invoke(ctx, QxService_GetAssetBidOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qxServiceClient) GetEntityAskOrders(ctx context.Context, in *GetEntityOrdersRequest, opts ...grpc.CallOption) (*EntityOrders, error) {
	out := new(EntityOrders)
	err := c.cc.Invoke(ctx, QxService_GetEntityAskOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qxServiceClient) GetEntityBidOrders(ctx context.Context, in *GetEntityOrdersRequest, opts ...grpc.CallOption) (*EntityOrders, error) {
	out := new(EntityOrders)
	err := c.cc.Invoke(ctx, QxService_GetEntityBidOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QxServiceServer is the server API for QxService service.
// All implementations must embed UnimplementedQxServiceServer
// for forward compatibility
type QxServiceServer interface {
	GetFees(context.Context, *emptypb.Empty) (*Fees, error)
	GetAssetAskOrders(context.Context, *GetAssetOrdersRequest) (*AssetOrders, error)
	GetAssetBidOrders(context.Context, *GetAssetOrdersRequest) (*AssetOrders, error)
	GetEntityAskOrders(context.Context, *GetEntityOrdersRequest) (*EntityOrders, error)
	GetEntityBidOrders(context.Context, *GetEntityOrdersRequest) (*EntityOrders, error)
	mustEmbedUnimplementedQxServiceServer()
}

// UnimplementedQxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQxServiceServer struct {
}

func (UnimplementedQxServiceServer) GetFees(context.Context, *emptypb.Empty) (*Fees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFees not implemented")
}
func (UnimplementedQxServiceServer) GetAssetAskOrders(context.Context, *GetAssetOrdersRequest) (*AssetOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetAskOrders not implemented")
}
func (UnimplementedQxServiceServer) GetAssetBidOrders(context.Context, *GetAssetOrdersRequest) (*AssetOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetBidOrders not implemented")
}
func (UnimplementedQxServiceServer) GetEntityAskOrders(context.Context, *GetEntityOrdersRequest) (*EntityOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityAskOrders not implemented")
}
func (UnimplementedQxServiceServer) GetEntityBidOrders(context.Context, *GetEntityOrdersRequest) (*EntityOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityBidOrders not implemented")
}
func (UnimplementedQxServiceServer) mustEmbedUnimplementedQxServiceServer() {}

// UnsafeQxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QxServiceServer will
// result in compilation errors.
type UnsafeQxServiceServer interface {
	mustEmbedUnimplementedQxServiceServer()
}

func RegisterQxServiceServer(s grpc.ServiceRegistrar, srv QxServiceServer) {
	s.RegisterService(&QxService_ServiceDesc, srv)
}

func _QxService_GetFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QxServiceServer).GetFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QxService_GetFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QxServiceServer).GetFees(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QxService_GetAssetAskOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QxServiceServer).GetAssetAskOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QxService_GetAssetAskOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QxServiceServer).GetAssetAskOrders(ctx, req.(*GetAssetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QxService_GetAssetBidOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QxServiceServer).GetAssetBidOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QxService_GetAssetBidOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QxServiceServer).GetAssetBidOrders(ctx, req.(*GetAssetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QxService_GetEntityAskOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QxServiceServer).GetEntityAskOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QxService_GetEntityAskOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QxServiceServer).GetEntityAskOrders(ctx, req.(*GetEntityOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QxService_GetEntityBidOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QxServiceServer).GetEntityBidOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QxService_GetEntityBidOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QxServiceServer).GetEntityBidOrders(ctx, req.(*GetEntityOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QxService_ServiceDesc is the grpc.ServiceDesc for QxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.v1.QxService",
	HandlerType: (*QxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFees",
			Handler:    _QxService_GetFees_Handler,
		},
		{
			MethodName: "GetAssetAskOrders",
			Handler:    _QxService_GetAssetAskOrders_Handler,
		},
		{
			MethodName: "GetAssetBidOrders",
			Handler:    _QxService_GetAssetBidOrders_Handler,
		},
		{
			MethodName: "GetEntityAskOrders",
			Handler:    _QxService_GetEntityAskOrders_Handler,
		},
		{
			MethodName: "GetEntityBidOrders",
			Handler:    _QxService_GetEntityBidOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qx.proto",
}
